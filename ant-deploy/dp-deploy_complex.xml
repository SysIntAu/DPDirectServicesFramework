<?xml version="1.0" encoding="UTF-8"?>
<!-- *******************************************************************
	**
	** NAME
	** datapowerDeploy.xml
	**
	** PURPOSE
	** This file is an ANT build script developed for the deployment of version controlled configuration files to
	** DataPower XML acceleration devices.
	**
	** PARMS
	** To use the deploy targets locally, the following parameters should be supplied as a minimum:
	** dp.hostname OR dp.hostname.list  == Device/s to deploy to. 'dp.hostname.list' should be comma delimited, no spaces.
	** dp.user.name, dp.user.pw == User credentials
	** env         == DPDIRECT environment name eg 'DEV'. 
	** release.dir         == Staging dir contains the built deployment artifacts, this will be a temporary working directory
	**
	** OPTIONAL PARMS - Deployment
	** type         == deployment type. Corresponds to 'deploy.${type}' target. One of:  
	**                             'file', 'dir',  'service', (${qualified.path} or ${file} or ${dir} or ${service} param required) 
	**                             'files',  (both services & gateway)
	**                             'proxy',' (wsproxy objects, config, project files and SoaSM proxy wsdl and services files),
	**                             'services' (all),'services.objects', 'services.files',
	**                             'gateway' (all), 'gateway.objects', 'gateway.files',
	**                             'schema', 'esb' (all but schema), or 'all' (default is 'all')
	**                             'SVnnn' a valid service name.
	** wsproxy.name.list == Deploy a subset of wsproxies - files, wsdl and dp objects
	** domain.alias          == Working domain (default is 'ESB${dp.environment}' domain)
	** esb.xmlmanager  == Name of an XMLManager to flush when files are uploaded (default is 'ESB_Gateway_V1_XMLManager')
	** file, dir                 == unique file or directory name (or path or part-path) for upload - path resolved. Corresponds to deployment type.
	** service    	         == Deploy all files and directories bearing the service name in full or in part.
	**
	** MODIFICATIONS    DATE       	DETAILS
	** Tim Goodwill		2012.11.26	Initial script
	** 			2015.11.10	enable deployment of a single proxy only.
	**			2015.11.30	MPG Gateway Router into separate domain + allow for multiple WSProxy domains.
	******************************************************************** -->
<project name="dp-deploy" default="deploy">
	<property name="env" value="DEV"/>
	<property name="environment" value="${env}"/>
	
	<!-- Location of optional properties file -->
	<property file="deployment.properties"/>
	<property file="${environment}.properties"/>
	
	<!-- Device parameters -->
	<property name="dp.soma.port"  value="5550"/>
	<property name="dp.hostname.list" value="${dp.hostname}"/>
	<property name="dp.environment" value="${environment}"/>
	
	<!-- Deployment parameters -->
<!--	<property name="secure.environment.list" value="STAGE,PROD"/>
	<condition property="secure.environment" value="true">
		<contains string="${secure.environment.list}" substring="${environment}"/>
	</condition>-->
	
	<!-- Deployment type -->
	<condition property="wsproxy.name.list" value="${proxy}">
		<isset property="proxy"/>
	</condition>
	<condition property="type" value="file">
		<isset property="file"/>
	</condition>
	<condition property="type" value="dir">
		<isset property="dir"/>
	</condition>
	<condition property="type" value="service">
		<isset property="service"/>
	</condition>
	<condition property="type" value="proxy">
		<isset property="wsproxy.name.list"/>
	</condition>
	<property name="type" value="all"/>
	
	<!-- *****************************************************************
		** Define the deployment domains
		****************************************************************** -->
	<!-- ESB Domains -->
	<property name="domain.alias" value="ESB${environment}"/>
	<property name="services.domain.list" value="${domain.alias}-WS01,${domain.alias}-WS02"/>
	<!-- *** Gateway domain ***-->
	<property name="gateway.domain" value="${domain.alias}"/>
	<property name="ESB_Gateway.domain" value="${gateway.domain}"/>
	<!-- ** Assign wsproxies to webservices domains *** -->
	<!-- WS02 domain ("Integration") -->
	<property name="IntegrationAdaptor_Services.domain" value="${domain.alias}-WS02"/>
	<property name="NotificationAdaptor_Services.domain" value="${domain.alias}-WS02"/>
	<property name="Notification_Services.domain" value="${domain.alias}-WS02"/>
	<property name="Integration_Services.domain" value="${domain.alias}-WS02"/>
	<!-- Default services domain -->
	<property name="default.webservices.domain" value="${domain.alias}-WS01"/>
	
	<!-- Framework Components -->
	<property name="esb.component.list" value="ESB_Gateway,ESB_Services"/>
	<property name="esb.deployment.type" value="${type}"/>
	<property name="source.type" value="XML"/>
	
	<!-- Set the XMLManager name -->
	<property name="esb.xmlmanager" value="DomainDefaultCache_V1"/>
	<condition property="esb.webservices.xmlmanager" value="${proxy}_Cache_V1">
		<contains string="${proxy}" substring="_Services"/>
	</condition>
	<property name="esb.webservices.xmlmanager" value="ESB_Services_DefaultCache_V1"/>
	
	<!-- Deployment control -->
	<property name="verbose" value="false"/>
	<property name="fail.on.error" value="true"/>
	<property name="rollback.on.error" value="false"/>
	<condition property="quiesce.wait.time" value="80">
		<isset property="local.deploy"/>
	</condition>
	<property name="quiesce.wait.time" value="180"/>
	
	<!-- Default locations -->
	<property name="project.dir"  location="${basedir}/../.."/>
	<property name="release.dir"  location="${basedir}/release"/>
	<property name="esb.build.dir"  location="${project.dir}/ant-build"/>
	<property name="ant.resources.lib.dir"  location="${project.dir}/ant-build/lib"/>
	<property name="environment.dir"  location="${release.dir}/environment"/>
	<property name="temp.dir"  location="${release.dir}/staging"/>
	<property name="staging.dir"  location="${temp.dir}"/>
	
	<!-- *****************************************************************
		** Set up the "DPDirect" task library
		****************************************************************** -->
	<path id="dpdirect.class.path">
		<!-- classpath for the dpdirect task -->
		<pathelement location="${ant.resources.lib.dir}/dpdirect-1.0.4.jar"/>
		<!--<pathelement location="${ant.resources.lib.dir}/xercesImpl.jar"/>-->
		<pathelement location="${ant.resources.lib.dir}/xercesImpl-2.11.0.jar"/>
		<pathelement location="${ant.resources.lib.dir}/log4j.jar"/>
	</path>
	<taskdef name="dpDeploy" classname="org.dpdirect.dpmgmt.DPDirectTask" classpathref="dpdirect.class.path"/>
	
	<!-- *****************************************************************
		** Set up the "schematron" task library
		****************************************************************** -->
	<path id="schematron.class.path">
		<!-- classpath for performing runtime tests -->
		<pathelement location="${ant.resources.lib.dir}/ant-schematron-dpdirect.jar"/>
		<pathelement location="${ant.resources.lib.dir}/saxon9.jar"/>
		<pathelement location="${ant.resources.lib.dir}/saxon9-ant.jar"/>
	</path>
	<taskdef name="schematron" classname="org.dpdirect.schematron.SchematronTask" classpathref="schematron.class.path"/>
	
	<!-- *****************************************************************
		** Set up the "ant-contrib" task library
		****************************************************************** -->
	<path id="antcontrib.class.path" path="${ant.resources.lib.dir}/ant-contrib-1.0b3.jar"/>
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="antcontrib.class.path"/>	
	
<!-- ========================================================================================================== -->
<!-- === DEFAULT TARGET ======================================================================================= -->
<!-- ========================================================================================================== -->
	
	<!-- **********************************************************
		** target: deploy
		**
		** PURPOSE
		** This target is used to loop through the hostname and component lists, 
		** invoking the appropriate target for each component on each host.
		** Deployment target depends on the deployment type of 'file', 'dir', 'files', 'esb' or 'all' (default is 'all')
		** corresponding to targets 'deploy.file', 'deploy.dir', 'deploy.files' and 'deploy.all' respectively.
		****************************************************************** -->
	<target name="deploy" 
		depends="create.component.list, create.wsproxy.list"
		description="Deploys ESB built artifacts to multiple hosts.
		** PARAMETERS: 
		dp.hostname OR dp.hostname.list == Device/s to deploy to. 'dp.hostname.list' should be comma delimited, no spaces.
		environment == DPDIRECT environment name eg 'DEV', will look for env properties file eg 'DEV.xml' in the ant-deploy dir. 
		release.dir == Staging dir contains the built deployment artifacts, this will be a temporary working directory.
		** OPTIONAL PARAMETERS: 
		type == deployment type, of 'file', 'dir', 'files', 'schema', 'services', 'gateway' or 'all' (default is 'all')
		** EXAMPLES: 'ant -f dp-deploy.xml -Denvironment=DEV'  or  'ant -f dp-deploy.xml -Denvironment=DEV -Dtype=services -Drelease.dir=C:/Temp/release'">
		<echo message="Deploying ${esb.deployment.type}"/>
		<mkdir dir="${release.dir}"/>
		<antcall target="stage.files" inheritall="true" inheritrefs="true"/>
		<!-- For type 'all' parameter over-ride -->
		<if>
			<equals arg1="${esb.deployment.type}" arg2="all" />
			<then>
				<var name="wsproxy.name.list" unset="true"/>
			</then>
		</if>
		<!-- assign default domain name to wsproxy where not otherwise specified -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<property name="@{this.wsproxy}.domain"  value="${default.webservices.domain}"/>
			</sequential>
		</for>
		<!-- Multiple deployment to parallel devices -->
		<for list="${dp.hostname.list}" param="this.dp.host" >
			<sequential>
				<var name="dp.hostname" value="@{this.dp.host}"/>
				<!-- Deploy component to the device -->
				<antcall target="deploy.${esb.deployment.type}" inheritall="true" inheritrefs="true"/>
				<!-- Delay subsequent deployment until esb domains are ready to process -->
				<sleep seconds="5"/>
			</sequential>
		</for>
		<echo message="Deployment complete."/>
	</target>

<!-- ========================================================================================================== -->
<!-- === PATH & CONFIG TARGETS ================================================================================= -->
<!-- ========================================================================================================== -->	
	
	<!-- **********************************************************
		** target: create.component.list
		**
		** PURPOSE
		** Generate a list of components to be built 
		** based on the contents of the ${release.dir}/local/ondisk directory
		****************************************************************** -->
	<target name="create.component.list" unless="esb.component.list">
		<condition property="esb.component.list" value="ESB_Gateway">
			<contains string="${esb.deployment.type}" substring="gateway"/>
		</condition>
		<condition property="esb.component.list" value="ESB_Services">
			<contains string="${esb.deployment.type}" substring="services"/>
		</condition>
		<property name="esb.component.list" value="ESB_Gateway,ESB_Services"/>
	</target>
	
	<!-- **********************************************************
		** target: create.wsproxy.list
		** PURPOSE
		** Generate a list of service.proxy files to be deployed based on the chlid dirs of the deploy directory
		****************************************************************** -->
	<target name="create.wsproxy.list" unless="wsproxy.name.list">
		<!-- store a list of gateway names -->
		<path id="wsproxy.name.paths">
			<fileset dir="${release.dir}" 
				excludes="ESB_Services.xcfg"
				includes="*_Services.xcfg"/>
		</path>
		<pathconvert property="wsproxy.name.list" pathsep="," refid="wsproxy.name.paths">
			<mapper>
				<chainedmapper>
					<flattenmapper/>
					<mapper type="glob" from="*.xcfg" to="*"/>
				</chainedmapper>
			</mapper>
		</pathconvert>
		<echo message="wsproxy.name.list=${wsproxy.name.list}"/>
		<!-- assign default domain name to wsproxy where not otherwise specified -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<property name="@{this.wsproxy}.domain"  value="${default.webservices.domain}"/>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: create.config.file.list
		**
		** PURPOSE
		** Generate a list of components to be built 
		** based on the contents of the ${release.dir}/local/ondisk directory
		****************************************************************** -->
	<target name="create.config.file.list" unless="config.file.list"> 
		<!-- store a list of source components -->
		<path id="config.files">
			<fileset dir="${release.dir}/local/ondisk/ESB_Services/config" includes="*Config.xml"/>
			<fileset dir="${release.dir}/local/ondisk/ESB_Gateway/config" includes="*Config.xml"/>
		</path>
		
		<propertyregex property="release.dir.relative"
			input="${release.dir}"
			regexp="^/"
			replace=""
			global="false" />
		
		<pathconvert property="config.file.list" pathsep="," refid="config.files">
			<map from="${release.dir}/local/ondisk/" to=""/>
			<map from="${release.dir}\local\ondisk\" to=""/>
			<map from="${release.dir.relative}/local/ondisk/" to=""/>
			<map from="${release.dir.relative}\local\ondisk\" to=""/>
		</pathconvert>
	</target>
	
	<!-- **********************************************************
		** target: qualified.path.from.filename
		**
		** PURPOSE
		** Create qualified.path from ${file} param - dev/test only.
		****************************************************************** -->
	<target name="qualified.path.from.filename" unless="qualified.path">
		<fail unless="file">Error : 'file' parameter missing.</fail>
		<path id="file.path">
			<fileset dir="${release.dir}${file.separator}local" includes="**/${file}"/>
		</path>
		<pathconvert property="qualified.path" refid="file.path">
			<map from="${release.dir}${file.separator}local${file.separator}" to=""/>
		</pathconvert>
		<path id="gateway.file.path">
			<fileset dir="${release.dir}${file.separator}local${file.separator}ondisk${file.separator}ESB_Gateway" includes="**/${file}"/>
		</path>
		<pathconvert property="gateway.qualified.path" refid="gateway.file.path">
			<map from="${release.dir}${file.separator}local${file.separator}" to=""/>
		</pathconvert>
		<path id="services.file.path">
			<fileset dir="${release.dir}${file.separator}local${file.separator}ondisk${file.separator}ESB_Services" includes="**/${file}"/>
		</path>
		<pathconvert property="services.qualified.path" refid="services.file.path">
			<map from="${release.dir}${file.separator}local${file.separator}" to=""/>
		</pathconvert>
		<!-- inject if *Config.xml file to be uploaded -->
		<if>
			<contains string="${qualified.path}" substring="Config.xml"/>
			<then>
				<antcall target="inject.service.config" inheritall="true" inheritrefs="true"/>
			</then>
		</if>
	</target>
	
	<!-- **********************************************************
		** target: qualified.paths.from.servicename
		**
		** PURPOSE
		** Create qualified.path from ${file} param - dev/test only.
		****************************************************************** -->
	<target name="qualified.paths.from.servicename" unless="qualified.path">
		<fail unless="service">Error : 'service' parameter missing.</fail>
		<path id="file.paths">
			<fileset dir="${release.dir}${file.separator}local" includes="**/${service}/**"/>
			<fileset dir="${release.dir}${file.separator}local" includes="**/${service}*/**"/>
			<fileset dir="${release.dir}${file.separator}local" includes="**/${service}*"/>
		</path>
		<pathconvert property="qualified.path" refid="file.paths" pathsep=",">
			<map from="${release.dir}${file.separator}" to=""/>
		</pathconvert>
	</target>
	
	<!-- **********************************************************
		** target: standardise.qualified.path
		**
		** PURPOSE
		** Standardise qualified.path param for correct handling by set-file and set-dir
		****************************************************************** -->
	<target name="standardise.qualified.path" >
		<propertyregex property="qualified.temp.1"
			input="${qualified.path}"
			regexp="\\"
			replace="/"
			defaultValue="${qualified.path}"/>
		<propertyregex property="qualified.temp.2"
			input="${qualified.temp.1}"
			regexp="local/"
			replace=""
			defaultValue="${qualified.temp.1}"/>
		<var name="qualified.path" value="${qualified.temp.2}"/>
		<propertyregex property="qualified.temp.1"
			override="true"
			input="${gateway.qualified.path}"
			regexp="\\"
			replace="/"
			defaultValue="${gateway.qualified.path}"/>
		<propertyregex property="qualified.temp.2"
			override="true"
			input="${qualified.temp.1}"
			regexp="local/"
			replace=""
			defaultValue="${qualified.temp.1}"/>
		<var name="gateway.qualified.path" value="${qualified.temp.2}"/>
		<propertyregex property="qualified.temp.1"
			override="true"
			input="${services.qualified.path}"
			regexp="\\"
			replace="/"
			defaultValue="${qualified.path}"/>
		<propertyregex property="qualified.temp.2"
			override="true"
			input="${services.qualified.temp.1}"
			regexp="local/"
			replace=""
			defaultValue="${qualified.temp.1}"/>
		<var name="services.qualified.path" value="${qualified.temp.2}"/>
	</target>
	
	<!-- **********************************************************
		** target: stage.files
		**
		** PURPOSE
		** Move deliverables to staging directory for config injection
		****************************************************************** -->
	<target name="stage.files">
		<var name="staging.dir" value="${temp.dir}"/>
		<!--copy files to temporary deploy directory-->
		<mkdir dir="${staging.dir}"/>
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="${staging.dir}" includes="**/*" defaultexcludes="no"/>
		</delete>
		<copy todir="${staging.dir}" overwrite="true">
			<fileset dir="${release.dir}" excludes="staging,unit-test/**,Certificates/**"/>
		</copy>
		<copy todir="${staging.dir}/cert" overwrite="true" flatten="true">
			<fileset dir="${release.dir}" includes="Certificates/${dp.environment}/*"/>
		</copy>
		<copy todir="${staging.dir}/local/secure" overwrite="true" flatten="true">
			<fileset dir="${release.dir}" includes="security/${dp.environment}/*"/>
			<!--<fileset dir="${release.dir}" includes="security/${dp.environment}/*" excludes="*xacml-auth.xml"/>-->
		</copy>
<!--		<copy todir="${staging.dir}/local/secure" overwrite="true" flatten="true">
			<fileset dir="${release.dir}" includes="security/XACML/*"/>
		</copy>-->
	</target>
	
	<!-- **********************************************************
		** target: inject.config
		**
		** PURPOSE
		** Inject environment specific configuration file into the object xcfg and configuration fileset
		****************************************************************** -->
	<target name="inject.config" depends="inject.object.config, inject.service.config"/>
	
	<!-- **********************************************************
		** target: inject.object.config
		**
		** PURPOSE
		** Inject environment specific configuration file into the object .xcfg files.
		****************************************************************** -->
	<target name="inject.object.config" unless="${dp.hostname}.object.config.injected" depends="create.component.list, create.wsproxy.list">
		<!--Combine environment xconfig file with gateway xconfig-->
		<for list="ESB_Gateway,ESB_Services,${wsproxy.name.list}" param="this.gateway" >
			<sequential>
				<var name="xmlconfig.file" unset="true"/>
				<!-- combine env file with component xcfg file, and suffix environment xconfig file with Env name  -->
				<antcall target="combine.environment.config" inheritall="true" inheritrefs="true">
					<param  name="xmlconfig.file" value="@{this.gateway}.xcfg"/>
				</antcall>
			</sequential>
		</for>
		<!--Inject xconfig files with environment params-->
		<for list="${esb.component.list}" param="this.component" >
			<sequential>
				<xslt in="${staging.dir}/@{this.component}.xcfg" out="${staging.dir}/@{this.component}_${environment}.xcfg"
					style="${environment.dir}/Update_Environment_Properties.xsl"  force="true">
					<param name="ENV" expression="${dp.environment}"/>
					<param name="DOMAIN" expression="${domain.alias}"/>
					<param name="HOSTNAME" expression="${dp.hostname}"/>
					<outputproperty name="method" value="xml"/>
					<outputproperty name="standalone" value="yes"/>
					<outputproperty name="encoding" value="UTF-8"/>
					<outputproperty name="indent" value="yes"/>
				</xslt>
				<xslt in="${environment.dir}/${dp.environment}/ENV.xml" 
					out="${staging.dir}/local/ondisk/@{this.component}/config/@{this.component}-Properties.xml"
					style="${environment.dir}/Create_Runtime_Properties.xsl"  force="true">
					<param name="ENV" expression="${dp.environment}"/>
					<param name="HOSTNAME" expression="${dp.hostname}"/>
					<outputproperty name="method" value="xml"/>
					<outputproperty name="standalone" value="yes"/>
					<outputproperty name="encoding" value="UTF-8"/>
					<outputproperty name="indent" value="yes"/>
				</xslt>
				<!-- Validate properties file against schematron assertions -->
				<path id="properties.file.path">
					<fileset dir="${staging.dir}/local/ondisk/@{this.component}/config">
						<include name="*-Properties.xml"/>
					</fileset>
				</path>
				<pathconvert property="properties.file" refid="properties.file.path"/>
				<for list="${properties.file}" delimiter=";" param="file" >
					<sequential>
						<schematron schema="${staging.dir}/local/ondisk/@{this.component}/config/@{this.component}-PropertiesValidation.sch" 
							srcfile="@{file}" failonerror="${fail.on.error}"/>
						<delete file="result.xml"/>
					</sequential>
				</for>
			</sequential>
		</for>
		<!--Inject xconfig files with environment params-->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<xslt in="${staging.dir}/@{this.wsproxy}.xcfg" out="${staging.dir}/@{this.wsproxy}_${environment}.xcfg"
					style="${environment.dir}/Update_Environment_Properties.xsl"  force="true">
					<param name="ENV" expression="${dp.environment}"/>
					<param name="DOMAIN" expression="${domain.alias}"/>
					<param name="HOSTNAME" expression="${dp.hostname}"/>
					<outputproperty name="method" value="xml"/>
					<outputproperty name="standalone" value="yes"/>
					<outputproperty name="encoding" value="UTF-8"/>
					<outputproperty name="indent" value="yes"/>
				</xslt>
			</sequential>
		</for>
		<property name="${dp.hostname}.object.config.injected"  value="true"/>
	</target>
	
	<!-- **********************************************************
		** target: combine.environment.config
		**
		** PURPOSE
		** combine env file with component xcfg file, and suffix environment xconfig file with Env name 
		****************************************************************** -->
	<target name="combine.environment.config" depends="environment.config.file.present,combine.environment.config.file"/>
	<target name="environment.config.file.present">
		<available file="${environment.dir}/${dp.environment}/${xmlconfig.file}"  property="environment.config.file.present"/>
	</target>
	<target name="combine.environment.config.file" if="environment.config.file.present">
		<echo message="Combining ${dp.environment} environment config into ${xmlconfig.file}"/>
		<xslt in="${release.dir}/${xmlconfig.file}" out="${staging.dir}/${xmlconfig.file}"
			style="${environment.dir}/Combine_Environment_XConfig.xsl" force="true">
			<param name="ENV" expression="${dp.environment}"/>
			<param name="DOMAIN" expression="${domain.alias}"/>
			<param name="HOSTNAME" expression="${dp.hostname}"/>
			<param name="XCFG_FILENAME" expression="${xmlconfig.file}"/>
			<outputproperty name="method" value="xml"/>
			<outputproperty name="standalone" value="yes"/>
			<outputproperty name="encoding" value="UTF-8"/>
			<outputproperty name="indent" value="yes"/>
		</xslt>
	</target>
	
	<!-- **********************************************************
		** target: inject.service.config
		**
		** PURPOSE
		** Inject environment specific configuration file into the configuration fileset
		****************************************************************** -->
	<target name="inject.service.config" unless="${dp.hostname}.service.config.injected" depends="create.config.file.list">
		<!--Inject services and gateway config files with environment params-->
		<for list="${config.file.list}" param="this.config.file" >
			<sequential>
				<mkdir dir="${staging.dir}/local/ondisk"/>
				<xslt in="${release.dir}/local/ondisk/@{this.config.file}" out="${staging.dir}/local/ondisk/@{this.config.file}"
					style="${environment.dir}/Update_Environment_Properties.xsl" force="true">
					<param name="ENV" expression="${dp.environment}"/>
					<param name="DOMAIN" expression="${domain.alias}"/>
					<param name="HOSTNAME" expression="${dp.hostname}"/>
					<outputproperty name="method" value="xml"/>
					<outputproperty name="standalone" value="yes"/>
					<outputproperty name="encoding" value="UTF-8"/>
					<outputproperty name="indent" value="yes"/>
				</xslt>
			</sequential>
		</for>
		<property name="${dp.hostname}.service.config.injected"  value="true"/>
	</target>
	
<!-- ========================================================================================================== -->
<!-- === DP MANAGEMENT TARGETS ================================================================================== -->
<!-- ========================================================================================================== -->	
	
		<!-- **********************************************************
		** target: reset.gateway.domain
		**
		** PURPOSE
		** Reset domain
		****************************************************************** -->
	<target name="reset.gateway.domain" depends="inject.config">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="false" rollbackOnError="false">
			<operation name="SaveConfig"/>
		</dpDeploy>
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="StopDomainRequest"/>
			<operation name="GetDomainStatusRequest" waitFor="down"/>
			<operation name="ResetDomain">
				<option name="Domain" value="${gateway.domain}"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: reset.webservices.domains
		**
		** PURPOSE
		** Reset domain
		****************************************************************** -->
	<target name="reset.webservices.domains" depends="inject.config">
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="SaveConfig"/>
				</dpDeploy>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="StopDomainRequest"/>
					<operation name="GetDomainStatusRequest" waitFor="down"/>
					<operation name="ResetDomain">
						<option name="Domain" value="@{this.webservices.domain}"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: start.esb.domains
		**
		** PURPOSE
		** Start domain
		****************************************************************** -->
	<target name="start.esb.domains" depends="start.webservices.domains, start.gateway.domain"/>
	
	<!-- **********************************************************
		** target: start.gateway.domain
		**
		** PURPOSE
		** Start domain
		****************************************************************** -->
	<target name="start.gateway.domain" >
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="StartDomainRequest"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: start.webservices.domains
		**
		** PURPOSE
		** Start the domain following deployment
		****************************************************************** -->
	<target name="start.webservices.domains">
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="StartDomainRequest"/>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: quiesce.gateway
		**
		** PURPOSE
		** Quiesce the domain for safe deployment, restart.
		****************************************************************** -->
	<target name="quiesce.gateway" depends="quiesce.mpg">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="DomainQuiesce">
				<option name="name" value="${gateway.domain}"/>
				<option name="timeout" value="${quiesce.wait.time}"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: unquiesce.gateway
		**
		** PURPOSE
		** Unquiesce the domain following deployment, restart
		****************************************************************** -->
	<target name="unquiesce.gateway">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="DomainUnquiesce">
				<option name="name" value="${gateway.domain}"/>
			</operation>
			<operation name="GetDomainStatusRequest" waitFor="up"  waitTime="${quiesce.wait.time}"/>
			<operation name="SaveConfig"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: quiesce.mpg
		**
		** PURPOSE
		** Disable all Front Side Handlers
		****************************************************************** -->
	<target name="quiesce.mpg">
		<echo message="Quiescing ${gateway.domain} on ${dp.hostname}"/>
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="false" rollbackOnError="false">
			<operation name="ServiceQuiesce">
				<option name="type" value="MultiProtocolGateway"/>
				<option name="name" value="ESB_Gateway_V1"/>
				<option name="timeout" value="${quiesce.wait.time}"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: unquiesce.mpg
		**
		** PURPOSE
		** Enable all Front Side Handlers
		****************************************************************** -->
	<target name="unquiesce.mpg">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="ServiceUnquiesce">
				<option name="type" value="MultiProtocolGateway"/>
				<option name="name" value="ESB_Gateway_V1"/>
				<option name="timeout" value="${quiesce.wait.time}"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: quiesce.webservices.domains
		**
		** PURPOSE
		** Quiesce the domain prior to deployment
		****************************************************************** -->
	<target name="quiesce.webservices.domains">
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="DomainQuiesce">
						<option name="name" value="@{this.webservices.domain}"/>
						<option name="timeout" value="${quiesce.wait.time}"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: unquiesce.webservices.domains
		**
		** PURPOSE
		** Unquiesce the domain following deployment, restart
		****************************************************************** -->
	<target name="unquiesce.webservices.domains">
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="DomainUnquiesce">
						<option name="name" value="@{this.webservices.domain}"/>
					</operation>
					<operation name="GetDomainStatusRequest" waitFor="up"  waitTime="${quiesce.wait.time}"/>
					<operation name="SaveConfig"/>
				</dpDeploy>
			</sequential>
		</for>
		<sleep seconds="2"/>
	</target>
	
	<!-- **********************************************************
		** target: quiesce.wsproxies
		**
		** PURPOSE
		** Disable all proxy services
		****************************************************************** -->
	<target name="quiesce.wsproxies" depends="create.wsproxy.list">
		<!-- Disable each wsProxy -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<dpDeploy firmware="5" domain="${@{this.wsproxy}.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="ServiceQuiesce">
						<option name="type" value="WSGateway"/>
						<option name="name" value="@{this.wsproxy}_Proxy_V1"/>
						<option name="timeout" value="${quiesce.wait.time}"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: disable.wsproxies
		**
		** PURPOSE
		** Disable all proxy services
		****************************************************************** -->
	<target name="disable.wsproxies" depends="create.wsproxy.list">
		<!-- Disable each wsProxy -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<dpDeploy firmware="5" domain="${@{this.wsproxy}.domain}" hostname="${dp.hostname}" 
				verbose="${verbose}" failOnError="false" rollbackOnError="false">
				<operation name="modify-config">
					<option name="WSGateway.name" value="@{this.wsproxy}_Proxy_V1"/>
					<option name="mAdminState" value="disabled"/>
				</operation>
			</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: enable.wsproxies
		**
		** PURPOSE
		** Enable all proxy services
		****************************************************************** -->
	<target name="enable.wsproxies" depends="create.wsproxy.list">
		<!-- Enable each wsProxy -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
			<dpDeploy firmware="5" domain="${@{this.wsproxy}.domain}" hostname="${dp.hostname}" 
				verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
				<operation name="modify-config">
					<option name="WSGateway.name" value="@{this.wsproxy}_Proxy_V1"/>
					<option name="mAdminState" value="enabled"/>
				</operation>
			</dpDeploy>
			</sequential>
		</for>
		<sleep seconds="5"/>
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="SaveConfig"/>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: flush.all.caches
		**
		** PURPOSE
		** flush all XML document and schema caches
		****************************************************************** -->
	
	<target name="deploy.flush.all" depends="flush.gateway.cache, flush.webservices.cache, flush.wsproxy.cache"/>
	<target name="flush.gateway.cache">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="false" rollbackOnError="false">
			<operation name="FlushStylesheetCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
			<operation name="FlushDocumentCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
		</dpDeploy>
	</target>
	<target name="flush.webservices.cache">
		<!-- Flush each default services domain cache -->
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="FlushStylesheetCache">
						<option name="XMLManager" value="${esb.webservices.xmlmanager}"/>
					</operation>
					<operation name="FlushDocumentCache">
						<option name="XMLManager" value="${esb.webservices.xmlmanager}"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: flush.wsproxy.cache
		**
		** PURPOSE
		** flush all XML document and schema caches
		****************************************************************** -->
	
	<target name="flush.wsproxy.cache" depends="create.wsproxy.list">
		<!-- Flush each wsProxy -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<dpDeploy firmware="5" domain="${@{this.wsproxy}.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="false" rollbackOnError="false">
					<operation name="FlushDocumentCache">
						<option name="XMLManager" value="@{this.wsproxy}_Cache_V1"/>
					</operation>
					<operation name="FlushStylesheetCache">
						<option name="XMLManager" value="@{this.wsproxy}_Cache_V1"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target:enable.fsh
		**
		** PURPOSE
		** Enable all Front Side Handlers
		****************************************************************** -->
	<target name="enable.fsh">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Request_FSH_MQ_SOA1"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Request_FSH_MQ_SOA2"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Notification_FSH_MQ_SOA1"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Notification_FSH_MQ_SOA2"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Notification_FSH_Batch_MQ_SOA1"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Notification_FSH_Batch_MQ_SOA2"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Integration_FSH_MQ_SOA1"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Integration_FSH_MQ_SOA2"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Integration_FSH_Batch_MQ_SOA1"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_V1_Integration_FSH_Batch_MQ_SOA2"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_VERIFY_V1_Request_FSH_MQ"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_VERIFY_V1_Integration_FSH_MQ"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="MQSourceProtocolHandler.name" value="ESB_Gateway_VERIFY_V1_Notification_FSH_MQ"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="HTTPSSourceProtocolHandler.name" value="ESB_Gateway_V1_Request_FSH_HTTPS"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="modify-config">
				<option name="HTTPSSourceProtocolHandler.name" value="ESB_Gateway_VERIFY_V1_Request_FSH_HTTPS"/>
				<option name="mAdminState" value="enabled"/>
			</operation>
			<operation name="SaveConfig"/>
		</dpDeploy>
	</target>
	
<!-- ========================================================================================================== -->
<!-- === DEPLOY TARGETS ======================================================================================= -->
<!-- ========================================================================================================== -->
	
	<!-- **********************************************************
		** target: deploy.esb
		**
		** PURPOSE
		** Deploy all objects in the ${component}.xcfg file to each dp device, and also
		** deploy all component files in the 'src' dir to the local:///ondisk/${component} path
		****************************************************************** -->
	<target name="deploy.esb" depends="quiesce.gateway,quiesce.wsproxies,reset.gateway.domain,reset.webservices.domains,deploy.gateway,deploy.webservices.framework,deploy.wsproxies,start.esb.domains,enable.wsproxies,unquiesce.gateway,enable.fsh"/>
	
	<!-- **********************************************************
		** target: deploy.proxy
		**
		** PURPOSE
		** Deploy all objects in the ESB_Services.xcfg file to each dp device, and also
		** deploy all component files in the 'src' dir to the local:///ondisk/${component} path
		****************************************************************** -->
	<target name="deploy.proxy" depends="quiesce.wsproxies,deploy.wsproxy.files,deploy.wsproxies,enable.wsproxies"/>
	
	<!-- **********************************************************
		** target: deploy.webservices
		**
		** PURPOSE
		** Deploy all objects in the ESB_Services.xcfg file to each dp device, and also
		** deploy all component files in the 'src' dir to the local:///ondisk/${component} path
		****************************************************************** -->
	<target name="deploy.webservices" depends="quiesce.wsproxies,deploy.wsproxies, deploy.webservices.files"/>
	
	<!-- **********************************************************
		** target: deploy.all
		**
		** PURPOSE
		** Deploy all objects in the ${component}.xcfg file to each dp device, and also
		** deploy all component files in the 'src' dir to the local:///ondisk/${component} path
		** includes SOASM
		** optional: userName="${dp.user.name}" userPassword="${dp.user.pw}"
		****************************************************************** -->
	<target name="deploy.all" depends="quiesce.gateway,quiesce.wsproxies,reset.gateway.domain,reset.webservices.domains,upload.schema,upload.security,deploy.gateway,deploy.webservices.framework,deploy.wsproxies,start.esb.domains,enable.wsproxies,unquiesce.gateway,enable.fsh"/>

	<!-- **********************************************************
		** target: deploy.files
		**
		** PURPOSE
		** Deploy all  files in the 'src' dir to the local:///ondisk/${component} path, do NOT deploy objects.
		****************************************************************** -->
	<target name="deploy.files" depends="deploy.webservices.files, deploy.gateway.files"/>
	
	<!-- **********************************************************
		** target: deploy.file
		**
		** PURPOSE
		** Deploy a single file to each host, to the local:///ondisk/${component} path
		****************************************************************** -->
	<target name="deploy.file" depends="qualified.path.from.filename, standardise.qualified.path,upload.gateway.file.list,upload.webservices.file.list"/>
	<target name="upload.gateway.file.list" if="gateway.qualified.path">
		<for list="${gateway.qualified.path}" delimiter=";" param="this.file.path" >
			<sequential>
				<antcall target="upload.file" inheritall="true" inheritrefs="true">
					<param  name="deploy.file.path" value="@{this.file.path}"/>
					<param  name="to.domain" value="${gateway.domain}"/>
				</antcall>
				<var name="deploy.file.path" unset="true"/>
				<var name="to.domain" unset="true"/>
				<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}"
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="FlushStylesheetCache">
						<option name="XMLManager" value="${esb.xmlmanager}"/>
					</operation>
					<operation name="FlushDocumentCache">
						<option name="XMLManager" value="${esb.xmlmanager}"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	<target name="upload.webservices.file.list" if="services.qualified.path">
		<for list="${services.qualified.path}" delimiter=";" param="this.file.path" >
			<sequential>
				<foreach target="upload.file" list="${services.domain.list}" param="to.domain"  inheritall="true">
					<param  name="deploy.file.path" value="@{this.file.path}"/>
				</foreach>
				<antcall target="flush.wsproxy.cache"/>
			</sequential>
		</for>
	</target>
	<target name="upload.file">
		<echo message="Deploying local:///${deploy.file.path} to ${to.domain}"/>
		<basename property="file.basename" file="${deploy.file.path}"/>
		<propertyregex property="file.path.dirname"
			input="${deploy.file.path}"
			regexp="${file.basename}"
			replace=""/>
		<dpDeploy firmware="5" domain="${to.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="CreateDir">
				<option name="Dir" value="local:///${file.path.dirname}"/>
			</operation>
			<operation name="set-file" srcFile="${staging.dir}/local/${deploy.file.path}">
				<option name="name" value="local:///${deploy.file.path}"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.service
		**
		** PURPOSE
		** Deploy service directory, stubs and schema to each host.
		****************************************************************** -->
	<target name="deploy.service" depends="qualified.paths.from.servicename, standardise.qualified.path">
		<for list="${qualified.path}" param="this.file.path" >
			<sequential>
				<foreach target="upload.file" list="${services.domain.list}" param="to.domain" inheritall="true">
					<param  name="deploy.file.path" value="@{this.file.path}"/>
				</foreach>
				<antcall target="flush.wsproxy.cache"/>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: deploy.schema
		**
		** PURPOSE
		** Deploy all schema files in the 'SOASM' dir to the local:///ondisk/SOASM path, do NOT deploy objects.
		****************************************************************** -->
	<target name="deploy.schema" depends="upload.schema">
		<antcall target="flush.webservices.cache"/>
		<antcall target="flush.wsproxy.cache"/>
	</target>
	
	<!-- **********************************************************
		** target: upload.schema
		**
		** PURPOSE
		** Upload all schema files in the 'SOASM' dir to the local:///ondisk/SOASM path, NO cache flush.
		****************************************************************** -->
	<target name="upload.schema">
		<foreach target="upload.schema.files" list="${services.domain.list}" param="to.domain" inheritall="true"/>
	</target>
	<target name="upload.schema.files">
		<echo message="Uploading SOA Service Model to the ${to.domain} domain on ${dp.hostname}"/>
		<dpDeploy firmware="5" domain="${to.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_if" destDir="local:///ondisk/soa_servicemodel_if" overwrite="true"/>
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_int" destDir="local:///ondisk/soa_servicemodel_int" overwrite="true"/>
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_prvdr" destDir="local:///ondisk/soa_servicemodel_prvdr" overwrite="true"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.security
		**
		** PURPOSE
		** Upload all security files in the 'secure' dir to the local:///ondisk/secure path and flush cache.
		****************************************************************** -->
	<target name="deploy.security">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/secure" destDir="local:///secure" replace="false" overwrite="true"/>
			<operation name="set-dir" srcDir="${staging.dir}/cert" destDir="cert:///" overwrite="true"/>
			<operation name="FlushStylesheetCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
			<operation name="FlushDocumentCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
		</dpDeploy>
		<foreach target="upload.certificates" list="${services.domain.list}" param="to.domain"  inheritall="true"/>
		<antcall target="flush.webservices.cache"/>
		<antcall target="flush.wsproxy.cache"/>
	</target>
	<target name="upload.certificates">
		<dpDeploy firmware="5" domain="${to.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/cert" destDir="cert:///" overwrite="true"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: upload.security
		**
		** PURPOSE
		** Upload all security files in the 'secure' dir to the local:///ondisk/secure path, NO cache flush.
		****************************************************************** -->
	<target name="upload.security" unless="secure.environment">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/secure" destDir="local:///secure" replace="false" overwrite="true"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.gateway.files
		**
		** PURPOSE
		** deploy all ESB_Gateway files in the 'src' dir to the local:///ondisk/ESB_Gateway path
		****************************************************************** -->
	<target name="deploy.gateway.files" depends="upload.gateway.files">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="false" rollbackOnError="false">
			<operation name="FlushStylesheetCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
			<operation name="FlushDocumentCache">
				<option name="XMLManager" value="${esb.xmlmanager}"/>
			</operation>
		</dpDeploy>
	</target>
	<target name="upload.gateway.files" depends="inject.service.config">
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/ESB_Gateway" destDir="local:///ondisk/ESB_Gateway"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.webservices.files
		**
		** PURPOSE
		** deploy all ESB_Services files in the 'src' dir to the local:///ondisk/ESB_Services path
		****************************************************************** -->
	<target name="deploy.webservices.files">
		<foreach target="upload.webservices.files" list="${services.domain.list}" param="to.domain"  inheritall="true"/>
		<antcall target="flush.webservices.cache"/>
		<antcall target="flush.wsproxy.cache"/>
	</target>
	<target name="upload.webservices.files" depends="inject.service.config">
		<echo message="Uploading service files to the ${to.domain} domain on ${dp.hostname}"/>
		<dpDeploy firmware="5" domain="${to.domain}" hostname="${dp.hostname}"
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/ESB_Services" destDir="local:///ondisk/ESB_Services" overwrite="true"/>
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/Unit_Test" destDir="local:///ondisk/Unit_Test" overwrite="true"/>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.gateway
		**
		** PURPOSE
		** Deploy all objects in the ESB_Gateway.xcfg file to each dp device, and also
		** deploy all ESB_Gateway files in the 'src' dir to the local:///ondisk/ESB_Gateway path
		****************************************************************** -->
	<target name="deploy.gateway" depends="inject.config">
		<echo message="Uploading ESB Gateway configuration to the ${gateway.domain} domain on ${dp.hostname}"/>
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/ESB_Gateway" destDir="local:///ondisk/ESB_Gateway" overwrite="true"/>
		</dpDeploy>
		<dpDeploy firmware="5" domain="${gateway.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="do-import">
				<option name="input-file" srcFile="${staging.dir}/ESB_Gateway_${environment}.xcfg"/>
				<option name="overwrite-files" value="true"/>
				<option name="overwrite-objects" value="true"/>
				<option name="source-type" value="XML"/>
			</operation>
		</dpDeploy>
	</target>
	
	<!-- **********************************************************
		** target: deploy.webservices.framework
		**
		** PURPOSE
		** Deploy all objects in the ESB_Services.xcfg file to each dp device, and also
		** deploy all ESB_Services files in the 'src' dir to the local:///ondisk/ESB_Services path
		****************************************************************** -->
	<target name="deploy.webservices.framework" depends="inject.config">
		<foreach target="upload.webservices.files" list="${services.domain.list}" param="to.domain"  inheritall="true"/>
		<for list="${services.domain.list}" param="this.webservices.domain" >
			<sequential>
				<echo message="Uploading ESB Web Services framework to the @{this.webservices.domain} domain on ${dp.hostname}"/>
				<dpDeploy firmware="5" domain="@{this.webservices.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="do-import">
						<option name="input-file" srcFile="${staging.dir}/ESB_Services_${environment}.xcfg"/>
						<option name="overwrite-files" value="true"/>
						<option name="overwrite-objects" value="true"/>
						<option name="source-type" value="XML"/>
					</operation>
				</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: deploy.wsproxies
		**
		** PURPOSE
		** Deploy all objects in the ${wsproxy}.xcfg file to each dp device
		****************************************************************** -->
	<target name="deploy.wsproxies" depends="create.wsproxy.list,inject.config">
		<!-- Deploy each wsProxy config -->
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<echo message="Uploading @{this.wsproxy} WSProxy configuration to the ${@{this.wsproxy}.domain} domain on ${dp.hostname}"/>
				<dpDeploy firmware="5" domain="${@{this.wsproxy}.domain}" hostname="${dp.hostname}" 
				verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
				<operation name="do-import">
					<option name="input-file" srcFile="${staging.dir}/@{this.wsproxy}_${environment}.xcfg"/>
					<option name="overwrite-files" value="true"/>
					<option name="overwrite-objects" value="true"/>
					<option name="source-type" value="XML"/>
				</operation>
			</dpDeploy>
			</sequential>
		</for>
	</target>
	
	<!-- **********************************************************
		** target: deploy.wsproxy.files
		**
		** PURPOSE
		** deploy all wsproxy files
		****************************************************************** -->
	<target name="deploy.wsproxy.files" depends="create.wsproxy.list,inject.config">
		<for list="${wsproxy.name.list}" param="this.wsproxy" >
			<sequential>
				<antcall target="upload.wsproxy.files">
					<param name="wsproxy.name" value="@{this.wsproxy}"/>
					<param name="wsproxy.domain" value="${@{this.wsproxy}.domain}"/>
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="upload.wsproxy.files">
		<echo message="Uploading ${wsproxy.name} files to the ${wsproxy.domain} domain on ${dp.hostname}"/>
		<propertyregex property="unfiltered.stream.name"
			input="${wsproxy.name}"
			regexp="_Services"
			replace=""
			global="false"
			defaultValue="${wsproxy.name}"
			override="true"/>
		<propertyregex property="this.stream.name"
			input="${unfiltered.stream.name}"
			regexp="Identity"
			replace="PersonIdentity"
			global="false"
			defaultValue="${unfiltered.stream.name}"
			override="true"/>
		<dpDeploy firmware="5" domain="${wsproxy.domain}" hostname="${dp.hostname}" 
			verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
			<operation name="set-file" srcFile="${staging.dir}/local/ondisk/ESB_Services/config/${wsproxy.name}_Proxy_V1_ServiceConfig.xml">
				<option name="name" value="local:///ondisk/ESB_Services/config/${wsproxy.name}_Proxy_V1_ServiceConfig.xml"/>
			</operation>
		</dpDeploy>
		<if>
			<available file="${staging.dir}/local/ondisk/ESB_Services/services/${wsproxy.name}" type="dir"/>
			<then>
				<dpDeploy firmware="5" domain="${wsproxy.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/ESB_Services/services/${wsproxy.name}" destDir="local:///ondisk/ESB_Services/services/${wsproxy.name}" overwrite="true"/>
				</dpDeploy>
			</then>
		</if>
		<if>
			<available file="${staging.dir}/local/ondisk/soa_servicemodel_if/XML/XMLSchemaRepository/${this.stream.name}" type="dir"/>
			<then>
				<dpDeploy firmware="5" domain="${wsproxy.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_if/XML/XMLSchemaRepository/${this.stream.name}" destDir="local:///ondisk/soa_servicemodel_if/XML/XMLSchemaRepository/${this.stream.name}" overwrite="true"/>
				</dpDeploy>
			</then>
		</if>
		<if>
			<equals arg1="${wsproxy.name}" arg2="IntegrationAdaptor" />
			<then>
				<dpDeploy firmware="5" domain="${wsproxy.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_prvdr/Provider" destDir="local:///ondisk/soa_servicemodel_prvdr/IntegrationServices" overwrite="true"/>
				</dpDeploy>
			</then>
		</if>
		<if>
			<equals arg1="${wsproxy.name}" arg2="Integration" />
			<then>
				<dpDeploy firmware="5" domain="${wsproxy.domain}" hostname="${dp.hostname}" 
					verbose="${verbose}" failOnError="${fail.on.error}" rollbackOnError="false">
					<operation name="set-dir" srcDir="${staging.dir}/local/ondisk/soa_servicemodel_int/Provider" destDir="local:///ondisk/soa_servicemodel_int/IntegrationServices" overwrite="true"/>
				</dpDeploy>
			</then>
		</if>
	</target>
	
</project>